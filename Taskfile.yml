# Testing

unitTest:
  desc: Run Unit Tests (specity PHP version by setting the environment variable PHP_VERSION)
  cmds:
    - ./ci/docker.sh robbrazier/php:$PHP_VERSION ./ci/unit.sh

integrationTest:
  desc: Run Integration Tests (specity Laravel version by setting the environment variable LARAVEL_VERSION)
  env:
    envVars: LARAVEL_VERSION
  cmds:
    - ./ci/docker.sh robbrazier/php:7.1 ./plugin/ci/integration.sh plugin

qa:
  desc: Run QA tasks (code coverage and pushing results to CodeClimate)
  env:
    envVars: CC_TEST_REPORTER_ID
  cmds:
    - ./ci/docker.sh robbrazier/php:7.1 ./ci/qa.sh

# Deploy

daux:
  desc: Build documentation from ./docs
  cmds:
    - ./ci/docker.sh robbrazier/php:7.1 ./ci/docs/daux.sh

sami:
  desc: Build API documentation
  cmds:
    - ./ci/docker.sh robbrazier/php:7.1 ./ci/docs/sami.sh

deploy:
  env:
    envVars: NETLIFY_TOKEN
  cmds:
    - task: daux
    - task: sami
    - ./ci/docker.sh node:6.11-alpine ./ci/docs/netlify.sh

# Utility

clean:
  desc: Clean temporary/build directories
  cmds:
    - rm -rf build reports

codeclimate:install:
  desc: Install CodeClimate docker containers for local quality analysis
  cmds:
    - docker run --rm -e CODECLIMATE_CODE="$PWD" -v "$PWD:/code" -v "/var/run/docker.sock:/var/run/docker.sock:ro" -v /tmp/cc:/tmp/cc codeclimate/codeclimate engines:install

codeclimate:analyze:
  desc: Run local CodeClimate quality analysis
  cmds:
    - docker run --rm -e CODECLIMATE_CODE="$PWD" -v "$PWD:/code" -v "/var/run/docker.sock:/var/run/docker.sock:ro" -v /tmp/cc:/tmp/cc codeclimate/codeclimate analyze
